[core]
    editor = nvim
    pager = delta
    autocrlf = input
    whitespace = fix,space-before-tab,tab-in-indent,trailing-space
    excludesfile = ~/.gitignore_global
    # Prevent macOS's revisiond daemon to mess up with our files.
    # See: https://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
    trustctime = false
[column]
    ui = auto
[pack]
    useSparse = true
[user]
    name = Kevin Deldycke
    email = kevin@deldycke.com
    signingkey = C572BB01B1ED5A3A
[color]
    diff = auto
    status = auto
    branch = auto
    ui = true
    interactive = auto
[delta]
    dark
    theme = 'Monokai Extended'
    paging = never
    hunk-header-style = omit
    line-numbers
[interactive]
    diffFilter = delta --color-only
[help]
    autocorrect = prompt
[apply]
    whitespace = fix
[diff]
    colorMoved = plain
    renames = true
    # histogram is an incremental improvement on patience
    algorithm = histogram
    # Source: https://mobile.twitter.com/brandur/status/1182066723337293828
    noprefix = true
[commit]
    verbose = true
    gpgsign = true
[log]
    decorate = full
[fetch]
    prune = true
    pruneTags = true
    all = true
[pull]
    # Source: https://stackoverflow.com/a/18756102/487610
    rebase = merges
[push]
    # Prevent accidental pushes to branches which youâ€™re not ready to push yet.
    # Source: http://mislav.uniqpath.com/2010/07/git-tips/
    default = tracking
    autoSetupRemote = true
    followTags = true
[stash]
    # Shows the diff of a stash.
    showPatch = true
[submodule]
    # Source: https://github.com/blog/2188-git-2-9-has-been-released/#faster-and-more-flexible-submodules
    fetchJobs = 2
[merge]
    log = true
    conflictstyle = zdiff3
[mergetool]
    # Do not keep backup files around after a successful merge.
    keepBackup = false
[branch]
    autosetuprebase = remote
    # Show most recently changed branches first.
 	sort = -committerdate
[tag]
    sort = version:refname
[init]
 	defaultBranch = main
[rebase]
    # Automatically stash and unstash the working directory before and after
    # rebases.
    autoStash = true
    autoSquash = true
    updateRefs = true
[rerere]
    enabled = true
    autoupdate = true
[alias]
    # Meta: Print supported aliases.
    aliases = config --get-regexp alias
    br = branch
    cl = clone
    cm = commit
    co = checkout
    df = diff
    g  = grep -I
    lg = log --patch
    pp = !"echo 'Pull'; git pull; echo 'Push'; git push"
    rb = rbranch
    rv = review
    st = status
    # Legit addons
    branches = !legit branches
    publish = !legit publish
    unpublish = !legit unpublish
    sync = !legit sync
    switch = !legit switch
    undo = !legit undo
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline --max-count=20 --graph --abbrev-commit --decorate
    hist = log --pretty=format:\"%C(yellow)%h%C(reset) %C(green)%ad%C(reset) %C(red)|%C(reset) %s %C(bold blue)[%an]%C(reset)%C(yellow)%d%C(reset)\" --graph --date=short
    # View the current working tree status using the short format
    s = status --short --branch
    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    # Pull in remote changes for the current repository and all its submodules
    p = pull --recurse-submodules
    # Clone a repository including all submodules
    c = clone --recursive
    # Commit all changes
    ca = !git add --all && git commit --all --verbose
    # Switch to a branch, creating it if necessary
    go = !git checkout -b "$1" || git checkout "$1"
    # Create a new branch and push it upstream
    nb = "!f() { git checkout -b ${1} && git push --set-upstream origin ${1}:${1}; }; f"
    # Show verbose output about tags and remotes
    tags = tag --list
    remotes = remote --verbose
    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" --reuse-message=HEAD; }; f"
    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase --interactive HEAD~$1; }; r"
    # Find branches containing commit
    fb = "!f() { git branch --all --contains $1; }; f"
    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
    # Find commits by sourcecode
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
    # Remove already merged branches
    dm = "!git branch --merged | grep --invert-match '\\*' | xargs --max-args=1 git branch --delete"

[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "https://github.com/"
    pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
    insteadOf = "github:"

[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
    pushInsteadOf = "gist:"